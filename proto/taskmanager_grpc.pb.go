// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: taskmanager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagerClient interface {
	// adds tasks to the taskManager
	AddTasks(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*AddTasksResp, error)
	// updates tasks in the taskManager
	UpdateTasks(ctx context.Context, in *UpdateTasksReq, opts ...grpc.CallOption) (*UpdateTasksResp, error)
	// Delete tasks from the taskManager
	DeleteTasks(ctx context.Context, in *DeleteTasksReq, opts ...grpc.CallOption) (*DeleteTaskResp, error)
	// finds a task in the TaskManager
	SearchTasks(ctx context.Context, in *SearchTaskReq, opts ...grpc.CallOption) (TaskManager_SearchTasksClient, error)
}

type taskManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerClient(cc grpc.ClientConnInterface) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) AddTasks(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*AddTasksResp, error) {
	out := new(AddTasksResp)
	err := c.cc.Invoke(ctx, "/taskmanager.TaskManager/AddTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) UpdateTasks(ctx context.Context, in *UpdateTasksReq, opts ...grpc.CallOption) (*UpdateTasksResp, error) {
	out := new(UpdateTasksResp)
	err := c.cc.Invoke(ctx, "/taskmanager.TaskManager/UpdateTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) DeleteTasks(ctx context.Context, in *DeleteTasksReq, opts ...grpc.CallOption) (*DeleteTaskResp, error) {
	out := new(DeleteTaskResp)
	err := c.cc.Invoke(ctx, "/taskmanager.TaskManager/DeleteTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) SearchTasks(ctx context.Context, in *SearchTaskReq, opts ...grpc.CallOption) (TaskManager_SearchTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskManager_ServiceDesc.Streams[0], "/taskmanager.TaskManager/SearchTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerSearchTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManager_SearchTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type taskManagerSearchTasksClient struct {
	grpc.ClientStream
}

func (x *taskManagerSearchTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskManagerServer is the server API for TaskManager service.
// All implementations must embed UnimplementedTaskManagerServer
// for forward compatibility
type TaskManagerServer interface {
	// adds tasks to the taskManager
	AddTasks(context.Context, *AddTaskReq) (*AddTasksResp, error)
	// updates tasks in the taskManager
	UpdateTasks(context.Context, *UpdateTasksReq) (*UpdateTasksResp, error)
	// Delete tasks from the taskManager
	DeleteTasks(context.Context, *DeleteTasksReq) (*DeleteTaskResp, error)
	// finds a task in the TaskManager
	SearchTasks(*SearchTaskReq, TaskManager_SearchTasksServer) error
	mustEmbedUnimplementedTaskManagerServer()
}

// UnimplementedTaskManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServer struct {
}

func (UnimplementedTaskManagerServer) AddTasks(context.Context, *AddTaskReq) (*AddTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTasks not implemented")
}
func (UnimplementedTaskManagerServer) UpdateTasks(context.Context, *UpdateTasksReq) (*UpdateTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTasks not implemented")
}
func (UnimplementedTaskManagerServer) DeleteTasks(context.Context, *DeleteTasksReq) (*DeleteTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTasks not implemented")
}
func (UnimplementedTaskManagerServer) SearchTasks(*SearchTaskReq, TaskManager_SearchTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchTasks not implemented")
}
func (UnimplementedTaskManagerServer) mustEmbedUnimplementedTaskManagerServer() {}

// UnsafeTaskManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagerServer will
// result in compilation errors.
type UnsafeTaskManagerServer interface {
	mustEmbedUnimplementedTaskManagerServer()
}

func RegisterTaskManagerServer(s grpc.ServiceRegistrar, srv TaskManagerServer) {
	s.RegisterService(&TaskManager_ServiceDesc, srv)
}

func _TaskManager_AddTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).AddTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskmanager.TaskManager/AddTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).AddTasks(ctx, req.(*AddTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_UpdateTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).UpdateTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskmanager.TaskManager/UpdateTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).UpdateTasks(ctx, req.(*UpdateTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_DeleteTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).DeleteTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskmanager.TaskManager/DeleteTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).DeleteTasks(ctx, req.(*DeleteTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_SearchTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchTaskReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagerServer).SearchTasks(m, &taskManagerSearchTasksServer{stream})
}

type TaskManager_SearchTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type taskManagerSearchTasksServer struct {
	grpc.ServerStream
}

func (x *taskManagerSearchTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

// TaskManager_ServiceDesc is the grpc.ServiceDesc for TaskManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskmanager.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTasks",
			Handler:    _TaskManager_AddTasks_Handler,
		},
		{
			MethodName: "UpdateTasks",
			Handler:    _TaskManager_UpdateTasks_Handler,
		},
		{
			MethodName: "DeleteTasks",
			Handler:    _TaskManager_DeleteTasks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchTasks",
			Handler:       _TaskManager_SearchTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taskmanager.proto",
}

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/taskmanager.Health/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[0], "/taskmanager.Health/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Health_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthWatchClient struct {
	grpc.ClientStream
}

func (x *healthWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, Health_WatchServer) error
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServer) Watch(*HealthCheckRequest, Health_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskmanager.Health/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServer).Watch(m, &healthWatchServer{stream})
}

type Health_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type healthWatchServer struct {
	grpc.ServerStream
}

func (x *healthWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskmanager.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Health_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taskmanager.proto",
}
